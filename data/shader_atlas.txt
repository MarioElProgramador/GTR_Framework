//######################################### SHADERS #########################################
flat basic.vs flat.fs
texture basic.vs texture.fs

singlelight basic.vs singlelight.fs
multilight basic.vs multilight.fs

gamma basic.vs gamma.fs
gbuffers basic.vs gbuffers.fs
deferred quad.vs deferred.fs
sphere_deferred basic.vs sphere_deferred.fs
depth quad.vs depth.fs

ssao quad.vs ssao.fs
ssao_blur basic.vs ssao_blur.fs

tonemapper quad.vs tonemapper.fs
probe basic.vs probe.fs
reflection_probe basic.vs reflection_probe.fs
skybox basic.vs skybox.fs
irradiance quad.vs irradiance.fs

decal basic.vs decal.fs
chrlen quad.vs chrlen.fs
depth_of_field quad.vs depth_of_field.fs
antialiasing quad.vs antialiasing.fs
motionblur quad.vs motionblur.fs
blurredof quad.vs blurredof.fs
volumetric quad.vs volumetric.fs

multi basic.vs multi.fs

// -------------------------------------------------------------------------------
// Funciones para calcular 
// NORMALMAP
\normalmap

mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

// TESTEAR
// para los picos de las sombras
/*
float bilinear( 
   const float &tx, 
   const float &ty, 
   const Vec3f &c00, 
   const Vec3f &c10, 
   const Vec3f &c01, 
   const Vec3f &c11) 
{ 
#if 1 
    float  a = c00 * (1 - tx) + c10 * tx; 
    float  b = c01 * (1 - tx) + c11 * tx; 
    return a * (1) - ty) + b * ty; 
#else 
    return (1 - tx) * (1 - ty) * c00 + 
        tx * (1 - ty) * c10 + 
        (1 - tx) * ty * c01 + 
        tx * ty * c11; 
#endif 
} 
*/

// -------------------------------------------------------------------------------
// SHADOWMAP	
\shadowmap

// Singlelight
uniform int u_light_cast_shadows[MAX_LIGHTS];
uniform mat4 u_shadow_viewproj[MAX_LIGHTS];
uniform float u_light_shadowbias[MAX_LIGHTS];
uniform sampler2D u_light_shadowmap[MAX_LIGHTS];

float testShadowmapSingleLight (vec3 pos, int i){
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_shadow_viewproj[i] * vec4(pos,1.0);

	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;

	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (proj_pos.z - u_light_shadowbias[i]) / proj_pos.w;

	//normalize from [-1..+1] to [0..+1] still non-linear
	real_depth = real_depth * 0.5 + 0.5;
	
	//read depth from depth buffer in [0..+1] non-linear
	float shadow_depth = texture( u_light_shadowmap[i], shadow_uv).x;
	
	//compute final shadow factor by comparing
	float shadow_factor = 1.0;

	//we can compare them, even if they are not linear
	if( shadow_depth < real_depth )
		shadow_factor = 0.0;

	//it is outside on the sides
	if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
		return 1.0;

	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0)
		return 1.0;

	return shadow_factor;
}

// ------------------
// Multilight
uniform int u_light_cast_shadows_ml;
uniform sampler2D u_light_shadowmap_ml;
uniform mat4 u_shadow_viewproj_ml;
uniform float u_light_shadowbias_ml;

float testShadowmap (vec3 pos) {
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_shadow_viewproj_ml * vec4(pos, 1.0);

	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;

	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (proj_pos.z - u_light_shadowbias_ml) / proj_pos.w;

	//normalize from [-1..+1] to [0..+1] still non-linear
	real_depth = real_depth * 0.5 + 0.5;

	//read depth from depth buffer in [0..+1] non-linear
	float shadow_depth = texture( u_light_shadowmap_ml, shadow_uv).x;

	//we can compare them, even if they are not linear
	float shadow_factor = 1.0;
	if( shadow_depth < real_depth )
		shadow_factor = 0.0;

	//it is outside on the sides
	if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
		return 1.0;

	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0)
		return 1.0;

	return shadow_factor;
}

// -------------------------------------------------------------------------------
// Specular formulas
\specular_formulas

#define PI 3.14159265359
#define RECIPROCAL_PI 0.3183098861837697

// Normal Distribution Function using GGX Distribution
float D_GGX (const in float NoH, const in float linearRoughness) {
	float a2 = linearRoughness * linearRoughness;
	float f = (NoH * NoH) * (a2 - 1.0) + 1.0;
	return a2 / (PI * f * f);
}

float F_Schlick(const in float VoH, const in float f0, float f90) {
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (f90 - f0) * f;
}

// Fresnel term with colorized fresnel
vec3 F_Schlick(const in float VoH, const in vec3 f0) {
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (vec3(1.0) - f0) * f;
}

// Geometry Term: Geometry masking/shadowing due to microfacets
float GGX(float NdotV, float k) {
	return NdotV / (NdotV * (1.0 - k) + k);
}
	
float G_Smith( float NdotV, float NdotL, float roughness) {
	float k = pow(roughness + 1.0, 2.0) / 8.0;
	return GGX(NdotL, k) * GGX(NdotV, k);
}

//this is the cook torrance specular reflection model
vec3 specularBRDF(float roughness, vec3 f0, float NoH, float NoV, float NoL, float LoH) {
	float a = roughness * roughness;

	// Normal Distribution Function
	float D = D_GGX(NoH, a);

	// Fresnel Function
	vec3 F = F_Schlick(LoH, f0);

	// Visibility Function (shadowing/masking)
	float G = G_Smith(NoV, NoL, roughness);
		
	// Norm factor
	vec3 spec = D * G * F;
	spec /= (4.0 * NoL * NoV + 1e-6);

	return spec;
}

float Fd_Burley (const in float NoV, const in float NoL, const in float LoH, const in float linearRoughness) {
    float f90 = 0.5 + 2.0 * linearRoughness * LoH * LoH;
    float lightScatter = F_Schlick(NoL, 1.0, f90);
    float viewScatter  = F_Schlick(NoV, 1.0, f90);
    return lightScatter * viewScatter * RECIPROCAL_PI;
}

// -------------------------------------------------------------------------------
\linear_gamma

vec3 degamma(vec3 c)
{
	return pow(c, vec3(2.2));
}

vec3 gamma(vec3 c)
{
	return pow(c, vec3(1.0/2.2));
}

// -------------------------------------------------------------------------------
\SHirr_formulas

const float Pi = 3.141592654;
const float CosineA0 = Pi;
const float CosineA1 = (2.0 * Pi) / 3.0;
const float CosineA2 = Pi * 0.25;
struct SH9 { float c[9]; }; //to store weights
struct SH9Color { vec3 c[9]; }; //to store colors

uniform vec3 u_irr_start;
uniform vec3 u_irr_end;
uniform vec3 u_irr_dim;
uniform float u_irr_normal_distance;
uniform float u_num_probes;
uniform vec3 u_irr_delta;
uniform sampler2D u_probes_texture;

void SHCosineLobe(in vec3 dir, out SH9 sh) //SH9
{
	// Band 0
	sh.c[0] = 0.282095 * CosineA0;
	// Band 1
	sh.c[1] = 0.488603 * dir.y * CosineA1; 
	sh.c[2] = 0.488603 * dir.z * CosineA1;
	sh.c[3] = 0.488603 * dir.x * CosineA1;
	// Band 2
	sh.c[4] = 1.092548 * dir.x * dir.y * CosineA2;
	sh.c[5] = 1.092548 * dir.y * dir.z * CosineA2;
	sh.c[6] = 0.315392 * (3.0 * dir.z * dir.z - 1.0) * CosineA2;
	sh.c[7] = 1.092548 * dir.x * dir.z * CosineA2;
	sh.c[8] = 0.546274 * (dir.x * dir.x - dir.y * dir.y) * CosineA2;
}

vec3 ComputeSHIrradiance(in vec3 normal, in SH9Color sh)
{
	// Compute the cosine lobe in SH, oriented about the normal direction
	SH9 shCosine;
	SHCosineLobe(normal, shCosine);
	// Compute the SH dot product to get irradiance
	vec3 irradiance = vec3(0.0);
	for(int i = 0; i < 9; ++i)
		irradiance += sh.c[i] * shCosine.c[i];

	return irradiance;
}

vec3 computeIrr(in vec3 local_indices,in vec3 N){
	// Compute in which row is the probe stored
	float row = local_indices.x + local_indices.y * u_irr_dim.x + local_indices.z * u_irr_dim.x * u_irr_dim.y;
	
	// Find the UV.y coord of that row in the probes texture
	float row_uv = (row + 1.0) / (u_num_probes + 1.0);

	SH9Color sh;

	// Fill the coefficients
	const float d_uvx = 1.0 / 9.0;
	for(int i = 0; i < 9; i++) {
		vec2 coeffs_uv = vec2((float(i)+0.5) * d_uvx, row_uv);
		sh.c[i] = texture(u_probes_texture, coeffs_uv).xyz;
	}

	// Now we can use the coefficients to compute the irradiance
	vec3 irradiance = ComputeSHIrradiance(N, sh);
	return irradiance;
}

// -------------------------------------------------------------------------------
\applyFXAA
vec4 applyFXAA(sampler2D tex, vec2 fragCoord) {
	vec4 color = vec4(0.0);
	vec3 rgbNW = texture2D(tex, (fragCoord + vec2(-1.0, -1.0)) * u_iViewportSize).xyz;
	vec3 rgbNE = texture2D(tex, (fragCoord + vec2(1.0, -1.0)) * u_iViewportSize).xyz;
	vec3 rgbSW = texture2D(tex, (fragCoord + vec2(-1.0, 1.0)) * u_iViewportSize).xyz;
	vec3 rgbSE = texture2D(tex, (fragCoord + vec2(1.0, 1.0)) * u_iViewportSize).xyz;
	vec3 rgbM  = texture2D(tex, fragCoord  * u_iViewportSize).xyz;
	vec3 luma = vec3(0.299, 0.587, 0.114);
	float lumaNW = dot(rgbNW, luma);
	float lumaNE = dot(rgbNE, luma);
	float lumaSW = dot(rgbSW, luma);
	float lumaSE = dot(rgbSE, luma);
	float lumaM  = dot(rgbM,  luma);
	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
	vec2 dir;
	dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
	dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));

	float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
	
	float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
	dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * u_iViewportSize;
	
	vec3 rgbA = 0.5 * (texture2D(tex, fragCoord * u_iViewportSize + dir * (1.0 / 3.0 - 0.5)).xyz + texture2D(tex, fragCoord * u_iViewportSize + dir * (2.0 / 3.0 - 0.5)).xyz);
	vec3 rgbB = rgbA * 0.5 + 0.25 * (texture2D(tex, fragCoord * u_iViewportSize + dir * -0.5).xyz + texture2D(tex, fragCoord * u_iViewportSize + dir * 0.5).xyz);
	
	float lumaB = dot(rgbB, luma);
	if ((lumaB < lumaMin) || (lumaB > lumaMax)) {
		color = vec4(rgbA, 1.0);
	}
	else {
		color = vec4(rgbB, 1.0);
	}
	return color;
}


// -------------------------------------------------------------------------------
\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

// --------------------------------------QUAD--------------------------------------
\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}

// -------------------------------------------------------------------------------
\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}

// --------------------------------------TEXTURE--------------------------------------
\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}

// --------------------------------------SINGLEPASS--------------------------------------
\singlelight.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

const int MAX_LIGHTS = 5;
uniform vec3 u_ambient_light;
uniform vec3 u_light_color[MAX_LIGHTS];
uniform vec3 u_light_position[MAX_LIGHTS];
uniform float u_light_max_distance[MAX_LIGHTS];
uniform int u_num_lights;
uniform int u_light_type[MAX_LIGHTS];
uniform vec3 u_light_direction[MAX_LIGHTS];
uniform float u_light_cosine_cutoff[MAX_LIGHTS];
uniform float u_light_exp[MAX_LIGHTS];

uniform sampler2D u_emissive_texture;
uniform vec3 u_emissive_factor;
uniform sampler2D u_occlusion_texture;
uniform sampler2D u_metallic_texture;
uniform sampler2D u_normal_texture;
uniform int has_normal;

uniform int is_reflection;
uniform vec3 u_camera_position;
uniform samplerCube u_reflection_texture;

out vec4 FragColor;

#include "shadowmap"
#include "normalmap"

void main()
{
	vec3 N = normalize(v_normal);
	if(has_normal == 1){
		vec3 normal_texture = texture2D( u_normal_texture, v_uv ).xyz;
		if(normal_texture != vec3(0,0,0))
			N = perturbNormal(N, v_world_position, v_uv, normal_texture);
	}

	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	float occlusion = texture2D(u_occlusion_texture, v_uv).x;
	float occlusion_metal = texture2D(u_metallic_texture, v_uv).x;
	float occlusion_factor = occlusion * occlusion_metal;

	vec3 light = vec3(u_ambient_light) * occlusion_factor;
	vec3 emissive_factor = texture(u_emissive_texture, v_uv).xyz;
	if (emissive_factor == vec3(0.0) && u_emissive_factor != vec3(1.0)) {
		emissive_factor = u_emissive_factor;
	}
	else {
		emissive_factor *= u_emissive_factor;
	}

	vec3 L;
	for(int i = 0; i < MAX_LIGHTS; ++i){
		if(i < u_num_lights){
			vec3 L = u_light_position[i] - v_world_position;
			float light_dist = length(L);
			L /= light_dist;

			float att_factor = u_light_max_distance[i] - light_dist;

			float spot_factor = 1.0;
			if (u_light_type[i] == 1){ // SPOT
				vec3 D = -normalize(u_light_direction[i]);
				float spot_cosine = dot(D, L);
				if(spot_cosine >= u_light_cosine_cutoff[i]){
					spot_factor = pow(spot_cosine, u_light_exp[i]);
				}
				else {
					spot_factor = 0.0;
				}
				att_factor *= spot_factor;
			}
			att_factor /= u_light_max_distance[i];

			if (u_light_type[i] == 2){ // DIRECTIONAL
				L = normalize( u_light_direction[i] );
				att_factor = 1.0;
			}

			float shadow_factor = 1.0;
			if(u_light_cast_shadows[i] == 1)
				shadow_factor = testShadowmapSingleLight(v_world_position, i);

			att_factor = max(att_factor, 0.0);
			att_factor *= pow(att_factor, 2.0);
	
			float NdotL = clamp( dot(N,L), 0.0, 1.0 );
			light += att_factor * NdotL * u_light_color[i] * shadow_factor;
		}
	}
	color.xyz *= light;
	color.xyz += emissive_factor;

	// Relfective
	if(is_reflection == 1){
		vec3 V = normalize(v_world_position - u_camera_position);
		vec3 R = reflect(V, N);
		vec3 material = texture(u_metallic_texture, v_uv).xyz;
		float roughness = material.y;
		vec3 reflection = color.xyz * textureLod(u_reflection_texture, R, roughness * 5.0 ).xyz;
		color.xyz = mix(color.xyz, reflection, roughness);
	}

	FragColor = color;
}

// --------------------------------------MULTIPASS--------------------------------------
\multilight.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_ambient_light;
uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform float u_light_max_distance;
uniform int u_light_type;
uniform vec3 u_light_direction;

uniform float u_light_cosine_cutoff;
uniform float u_light_exp;

uniform sampler2D u_emissive_texture;
uniform vec3 u_emissive_factor;
uniform sampler2D u_occlusion_texture;
uniform sampler2D u_metallic_texture;
uniform sampler2D u_normal_texture;
uniform int has_normal;

uniform int is_reflection;
uniform vec3 u_camera_position;
uniform samplerCube u_reflection_texture;

out vec4 FragColor;

const int MAX_LIGHTS = 5;
#include "shadowmap"
#include "normalmap"

void main()
{
	vec3 N = normalize(v_normal);

	if(has_normal == 1){
		vec3 normal_texture = texture2D( u_normal_texture, v_uv ).xyz;
		if(normal_texture != vec3(0,0,0))
			N = perturbNormal(N, v_world_position, v_uv, normal_texture);
	}

	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	vec3 emissive_factor = texture(u_emissive_texture, v_uv).xyz;
	if(emissive_factor == vec3(0.0) && u_emissive_factor != vec3(1.0)){
		emissive_factor = u_emissive_factor;
	}
	else{
		emissive_factor *= u_emissive_factor;
	}

	float occlusion = texture2D(u_occlusion_texture, v_uv).x;
	float occlusion_metal = texture2D(u_metallic_texture, v_uv).x;
	float occlusion_factor = occlusion * occlusion_metal;

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(u_ambient_light) * occlusion_factor;

	vec3 L = u_light_position - v_world_position;
	float light_dist = length(L);
	L /= light_dist;

	float att_factor = u_light_max_distance - light_dist;

	float spot_factor = 1.0;

	if (u_light_type == 1){ // SPOT light
		vec3 D = -normalize(u_light_direction);
		float spot_cosine = dot(D, L);
		if(spot_cosine >= u_light_cosine_cutoff){
			spot_factor = pow(spot_cosine, u_light_exp);
		}
		else {
			spot_factor = 0.0;
		}
		att_factor *= spot_factor;
	}
	att_factor /= u_light_max_distance;
	
	if (u_light_type == 2){ // DIRECTIONAL light
		L = normalize( u_light_direction );
		att_factor = 1.0;
	}
	
	float shadow_factor = 1.0;
	if(u_light_cast_shadows_ml == 1)
		shadow_factor = testShadowmap(v_world_position);

	att_factor = max(att_factor, 0.0);
	att_factor *= pow(att_factor, 2.0);
	
	float NdotL = clamp( dot(N,L), 0.0, 1.0 );
	light += att_factor * NdotL * u_light_color * shadow_factor;
	
	color.xyz *= light;
	color.xyz += emissive_factor;

	// Relfective
	if(is_reflection == 1){
		vec3 V = normalize(v_world_position - u_camera_position);
		vec3 R = reflect(V, N);
		vec3 material = texture(u_metallic_texture, v_uv).xyz;
		float roughness = material.y;
		vec3 reflection = color.xyz * textureLod(u_reflection_texture, R, roughness * 5.0 ).xyz;
		color.xyz = mix(color.xyz, reflection, roughness);
	}

	FragColor = color;
}

// --------------------------------------GAMMA--------------------------------------
\gamma.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;

out vec4 FragColor;

void main()
{
	vec4 color = texture(u_texture,v_uv);
	color.xyz = pow(color.xyz,vec3(1.0/2.2));
	FragColor = color;
}

// --------------------------------------GBUFFER--------------------------------------
\gbuffers.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform sampler2D u_emissive_texture;
uniform vec3 u_emissive_factor;
uniform sampler2D u_occlusion_texture;
uniform sampler2D u_metallic_texture;
uniform sampler2D u_normal_texture;
uniform int has_normal;
uniform float u_metallic_factor;
uniform float u_roughness_factor;

uniform int gamma_mode;

#include "normalmap"

layout(location = 0) out vec4 GB0;
layout(location = 1) out vec4 GB1;
layout(location = 2) out vec4 GB2;

void main() {
	vec3 N = normalize(v_normal);
	
	vec4 color = u_color;
	color *= texture(u_texture, v_uv);
	if(gamma_mode == 1) color.xyz = pow(color.xyz,vec3(2.2)); //Linear space

	vec3 metallic_texture = texture(u_metallic_texture, v_uv).xyz;
	float metallic = u_metallic_factor * metallic_texture.z;
	float roughness = u_roughness_factor * metallic_texture.y;

	if(color.a < u_alpha_cutoff) {
		discard;
	}

	vec3 emissive_factor = texture(u_emissive_texture, v_uv).xyz;
	if (emissive_factor == vec3(0.0) && u_emissive_factor != vec3(1.0)) {
		emissive_factor = u_emissive_factor;
	}
	else {
		emissive_factor *= u_emissive_factor;
	}

	if (has_normal == 1) {
		vec3 normal_pixel = texture2D(u_normal_texture, v_uv).xyz;
		N = perturbNormal(N, v_world_position, v_uv, normal_pixel);
	}

	GB0 = vec4(color.xyz, metallic_texture.x);
	GB1 = vec4(N * 0.5 + vec3(0.5), roughness);
	GB2 = vec4(emissive_factor, metallic);
}

// --------------------------------------DEFERRED--------------------------------------
\deferred.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_gb2_texture;
uniform sampler2D u_depth_texture;
uniform sampler2D u_ssao_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;

uniform vec3 u_ambient_light;
uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform float u_light_max_distance;
uniform int u_light_type;
uniform vec3 u_light_direction;
uniform vec3 u_camera_pos;

uniform float u_light_cosine_cutoff;
uniform float u_light_exp;

uniform int gamma_mode;
uniform int dynamic_range;

uniform int is_reflection;
uniform vec3 u_camera_position;
uniform samplerCube u_reflection_texture;

out vec4 FragColor;

const int MAX_LIGHTS = 5;
#include "shadowmap"
#include "normalmap"
#include "specular_formulas"

void main() {
	vec2 uv = gl_FragCoord.xy * u_iRes.xy; 

	vec4 gb0_color = texture(u_gb0_texture, uv);
	vec4 gb1_color = texture(u_gb1_texture, uv);
	vec4 gb2_color = texture(u_gb2_texture, uv);

	float depth = texture(u_depth_texture, uv).x;
	vec4 screen_pos = vec4(uv.x*2.0 - 1.0, uv.y*2.0 - 1.0, depth*2.0 - 1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 v_world_position = proj_worldpos.xyz / proj_worldpos.w;

	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));

	vec4 color = vec4(gb0_color.xyz, 1.0);
	if(gamma_mode == 1) color.xyz = pow(color.xyz,vec3(1.0/2.2)); //Linear space
		
	float ssao_factor = texture( u_ssao_texture, uv ).x;
	ssao_factor = pow(ssao_factor, 3.0);

	vec3 light = vec3(u_ambient_light) * ssao_factor;

	vec3 L = u_light_position - v_world_position;
	float light_dist = length(L);
	L /= light_dist;

	float att_factor = u_light_max_distance - light_dist;

	float spot_factor = 1.0;

	if (u_light_type == 1) { // SPOT light
		vec3 D = -normalize(u_light_direction);
		float spot_cosine = dot(D, L);
		if(spot_cosine >= u_light_cosine_cutoff) {
			spot_factor = pow(spot_cosine, u_light_exp);
		}
		else {
			spot_factor = 0.0;
		}
		att_factor *= spot_factor;
	}
	att_factor /= u_light_max_distance;
	
	if (u_light_type == 2) { // DIRECTIONAL light
		L = normalize(u_light_direction);
		att_factor = 1.0;
	}
	
	float shadow_factor = 1.0;
	if(u_light_cast_shadows_ml == 1)
		shadow_factor = testShadowmap(v_world_position);

	att_factor = max(att_factor, 0.0);
	att_factor *= pow(att_factor, 2.0);
	
	vec3 V = u_camera_pos - v_world_position;
	vec3 H = normalize(L + V);
	float NdotL = clamp(dot(N, L), 0.0, 1.0);
	float NoH = clamp(dot(N, H), 0.0, 1.0);
	float NoV = clamp(dot(N, V), 0.0, 1.0);
	float LoH = clamp(dot(L, H), 0.0, 1.0);

	//we compute the reflection in base to the color and the metalness
	vec3 f0 = mix(vec3(0.5), gb0_color.xyz, gb1_color.a);

	//metallic materials do not have diffuse
	vec3 diffuseColor = (1.0 - gb1_color.a) * gb0_color.xyz;

	//compute the specular
	vec3 Fr_d = specularBRDF(gb2_color.a, f0, NoH, NoV, NdotL, LoH);

	// linearRoughness = squared roughness
	vec3 Fd_d = diffuseColor * Fd_Burley(NoV, NdotL, LoH, gb2_color.a * gb2_color.a); 

	//add diffuse and specular reflection
	vec3 direct = Fr_d + Fd_d;

	//compute how much light received the pixel
	vec3 lightParams = u_light_color * att_factor * shadow_factor;

	//modulate direct light by light received
	light += direct * lightParams;
	light += gb2_color.xyz; //Emissive

	color.xyz *= light;

	FragColor = color;
}

// --------------------------------------DEFERRED_WS--------------------------------------
\sphere_deferred.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_gb2_texture;
uniform sampler2D u_depth_texture;
uniform sampler2D u_ssao_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;

uniform vec3 u_ambient_light;
uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform float u_light_max_distance;
uniform int u_light_type;
uniform vec3 u_light_direction;
uniform vec3 u_camera_pos;

uniform float u_light_cosine_cutoff;
uniform float u_light_exp;

uniform int gamma_mode;
uniform int dynamic_range;

uniform int is_reflection;
uniform vec3 u_camera_position;
uniform samplerCube u_reflection_texture;

out vec4 FragColor;

const int MAX_LIGHTS = 5;
#include "shadowmap"
#include "normalmap"
#include "specular_formulas"

void main() {
	vec2 uv = gl_FragCoord.xy * u_iRes.xy; 

	vec4 gb0_color = texture(u_gb0_texture, uv);
	vec4 gb1_color = texture(u_gb1_texture, uv);
	vec4 gb2_color = texture(u_gb2_texture, uv);

	float depth = texture(u_depth_texture, uv).x;
	vec4 screen_pos = vec4(uv.x*2.0 - 1.0, uv.y*2.0 - 1.0, depth*2.0 - 1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 v_world_position = proj_worldpos.xyz / proj_worldpos.w;

	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));

	vec4 color = vec4(gb0_color.xyz, 1.0);
	// Linear space
	if(gamma_mode == 1) color.xyz = pow(color.xyz,vec3(1.0/2.2)); 

	float ssao_factor = texture( u_ssao_texture, uv ).x;
	ssao_factor = pow( ssao_factor, 3.0 );

	vec3 light = vec3(u_ambient_light) * ssao_factor;

	vec3 L = u_light_position - v_world_position;
	float light_dist = length(L);
	L /= light_dist;

	float att_factor = u_light_max_distance - light_dist;

	float spot_factor = 1.0;

	if (u_light_type == 1) { // SPOT light
		vec3 D = -normalize(u_light_direction);
		float spot_cosine = dot(D, L);
		if(spot_cosine >= u_light_cosine_cutoff) {
			spot_factor = pow(spot_cosine, u_light_exp);
		}
		else {
			spot_factor = 0.0;
		}
		att_factor *= spot_factor;
	}
	att_factor /= u_light_max_distance;
	
	if (u_light_type == 2) { // DIRECTIONAL light
		L = normalize(u_light_direction);
		att_factor = 1.0;
	}
	
	float shadow_factor = 1.0;
	if(u_light_cast_shadows_ml == 1)
		shadow_factor = testShadowmap(v_world_position);

	att_factor = max(att_factor, 0.0);
	att_factor *= pow(att_factor, 2.0);
	
	vec3 V = u_camera_pos - v_world_position;
	vec3 H = normalize(L + V);
	float NdotL = clamp(dot(N, L), 0.0, 1.0);
	float NoH = clamp(dot(N, H), 0.0, 1.0);
	float NoV = clamp(dot(N, V), 0.0, 1.0);
	float LoH = clamp(dot(L, H), 0.0, 1.0);

	//we compute the reflection in base to the color and the metalness
	vec3 f0 = mix(vec3(0.5), gb0_color.xyz, gb1_color.a);

	//metallic materials do not have diffuse
	vec3 diffuseColor = (1.0 - gb1_color.a) * gb0_color.xyz;

	//compute the specular
	vec3 Fr_d = specularBRDF(gb2_color.a, f0, NoH, NoV, NdotL, LoH);

	// linearRoughness = squared roughness
	vec3 Fd_d = diffuseColor * Fd_Burley(NoV, NdotL, LoH, gb2_color.a * gb2_color.a); 

	//add diffuse and specular reflection
	vec3 direct = Fr_d + Fd_d;

	//compute how much light received the pixel
	vec3 lightParams = u_light_color * att_factor * shadow_factor;

	//modulate direct light by light received
	light += direct * lightParams;
	light += gb2_color.xyz; // Emissive

	color.xyz *= light;

	FragColor = color;
}

// -------------------------------------------------------------------------------
\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	if( n == 0.0 && f == 1.0 )
		FragColor = vec4(z);
	else
		FragColor = vec4( n * (z + 1.0) / (f + n - z * (f - n)) );
}

// --------------------------------------SSAO--------------------------------------
\ssao.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_gb2_texture;
uniform sampler2D u_depth_texture;

uniform mat4 u_viewprojection;
uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;
uniform vec3 u_points[64];

out vec4 FragColor;

#include "normalmap"

void main() {
	vec2 uv = v_uv + u_iRes * 0.5;
	
	vec4 gb0_color = texture(u_gb0_texture, uv);
	vec4 gb1_color = texture(u_gb1_texture, uv);
	vec4 gb2_color = texture(u_gb2_texture, uv);

	float depth = texture(u_depth_texture, uv).x;

	if(depth >= 1.0){
		FragColor = vec4(1.0);
		return;
	}

	vec4 screen_pos = vec4(uv.x*2.0 - 1.0, uv.y*2.0 - 1.0, depth*2.0 - 1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 v_world_position = proj_worldpos.xyz / proj_worldpos.w;

	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));
	mat3 rotmat = cotangent_frame(N, v_world_position, uv);

	const int samples = 64;
	int num = samples;

	for(int i = 0; i < samples; ++i) {
		vec3 rotated_point = rotmat * u_points[i];
		vec3 p = v_world_position + rotated_point * 10.0;

		vec4 proj = u_viewprojection * vec4(p,1.0);
		proj.xy /= proj.w;

		proj.z = (proj.z - 0.005) / proj.w;
		proj.xyz = proj.xyz * 0.5 + vec3(0.5); //to [0..1]

		float pdepth = texture(u_depth_texture, proj.xy).x;

		if(pdepth < proj.z){
			num--; 
		}
	}

	float ao = float(num) / float(samples);

	FragColor = vec4(ao);
}

// --------------------------------------BLUR--------------------------------------
\ssao_blur.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D ssaoInput;

out float FragColor;

void main() {
    vec2 texelSize = 1.0 / vec2(textureSize(ssaoInput, 0));
    float result = 0.0;
    for (int i = -2; i < 2; i++) {
        for (int j = -2; j < 2; j++) {
            vec2 offset = vec2(float(i), float(j))*texelSize;
            result += texture(ssaoInput, v_uv + offset).r;
        }
    }
    FragColor = result/(4.0*4.0);
}  

// --------------------------------------TONEMAPPER--------------------------------------
\tonemapper.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;

out vec4 FragColor;

void main()
{
	float u_scale = 4;
	float u_average_lum = 1;
	float u_lumwhite2 = 100;
	float u_igamma = 2.2;
	vec4 color = texture2D( u_texture, v_uv );

	vec3 rgb = color.xyz;

	float lum = dot(rgb, vec3(0.2126, 0.7152, 0.0722));
	float Lu = (u_scale / u_average_lum) * lum;
	float Ld = (Lu * (1.0 + Lu / u_lumwhite2)) / (1.0 + Lu);

	rgb = (rgb / lum) * Ld;
	rgb = max(rgb, vec3(0.001));
	rgb = pow(rgb, vec3(u_igamma));

	FragColor = vec4( rgb, color.a );
}

// --------------------------------------PROBE--------------------------------------
\probe.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec3 u_coeffs[9];

out vec4 FragColor;

#include "SHirr_formulas"

void main()
{
	SH9Color sh;
	sh.c[0] = u_coeffs[0];
	sh.c[1] = u_coeffs[1];
	sh.c[2] = u_coeffs[2];
	sh.c[3] = u_coeffs[3];
	sh.c[4] = u_coeffs[4];
	sh.c[5] = u_coeffs[5];
	sh.c[6] = u_coeffs[6];
	sh.c[7] = u_coeffs[7];
	sh.c[8] = u_coeffs[8];

	vec3 N = normalize(v_normal);
	vec3 irradiance = ComputeSHIrradiance(N, sh);

	FragColor = vec4(irradiance, 1.0);
}

// --------------------------------------SKYBOX--------------------------------------
\skybox.fs

#version 330 core

in vec3 v_world_position;

uniform samplerCube u_texture;
uniform vec3 u_camera_position;

out vec4 FragColor;

void main()
{
	vec3 V = normalize( u_camera_position - v_world_position );

	FragColor = texture( u_texture, V );
}

// --------------------------------------IRRADIANCE--------------------------------------
\irradiance.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_gb2_texture;
uniform sampler2D u_depth_texture;

uniform mat4 u_viewprojection;
uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;
uniform vec3 u_points[64];

uniform vec3 u_coeffs[9];

out vec4 FragColor;

#include "SHirr_formulas"

void main()
{
	vec2 uv = gl_FragCoord.xy * u_iRes.xy; 
	
	vec4 gb0_color = texture(u_gb0_texture, uv);
	vec4 gb1_color = texture(u_gb1_texture, uv);
	vec4 gb2_color = texture(u_gb2_texture, uv);

	float depth = texture(u_depth_texture, uv).x;
	if(depth >= 1.0)
		discard;
	vec4 screen_pos = vec4(uv.x*2.0 - 1.0, uv.y*2.0 - 1.0, depth*2.0 - 1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;

	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));
	//computing nearest probe index based on world position
	vec3 irr_range = u_irr_end - u_irr_start;
	vec3 irr_local_pos = clamp(worldpos - u_irr_start + N * u_irr_normal_distance, vec3(0.0), irr_range);

	//convert from world pos to grid pos
	vec3 irr_norm_pos = irr_local_pos / u_irr_delta;

	//floor instead of round
	vec3 local_indices = floor(irr_norm_pos);

	//now we have the interpolation factors
	vec3 factors = irr_norm_pos - local_indices;

	//local_indices points to Left,Bottom,Far
	vec3 indicesLBF = local_indices;
	vec3 indicesRBF = local_indices;
	indicesRBF.x += 1; //from left to right
	vec3 indicesLTF = local_indices;
	indicesLTF.y +=1;
	vec3 indicesRTF = local_indices;
	indicesRTF.x += 1;
	indicesRTF.y += 1;
	vec3 indicesLBN = local_indices;
	indicesLBN.z += 1;
	vec3 indicesRBN = local_indices;
	indicesRBN.x += 1;
	indicesRBN.z += 1;
	vec3 indicesLTN = local_indices;
	indicesLTN.y += 1;
	indicesLTN.z += 1;
	vec3 indicesRTN = local_indices;
	indicesRTN.x += 1;
	indicesRTN.y += 1;
	indicesRTN.z += 1;
	
	//compute irradiance for every corner
	vec3 irrLBF = computeIrr( indicesLBF, N );
	vec3 irrRBF = computeIrr( indicesRBF, N );
	vec3 irrLTF = computeIrr( indicesLTF, N );
	vec3 irrRTF = computeIrr( indicesRTF, N );
	vec3 irrLBN = computeIrr( indicesLBN, N );
	vec3 irrRBN = computeIrr( indicesRBN, N );
	vec3 irrLTN = computeIrr( indicesLTN, N );
	vec3 irrRTN = computeIrr( indicesRTN, N );

	vec3 irrTF = mix( irrLTF, irrRTF, factors.x );
	vec3 irrBF = mix( irrLBF, irrRBF, factors.x );
	vec3 irrTN = mix( irrLTN, irrRTN, factors.x );
	vec3 irrBN = mix( irrLBN, irrRBN, factors.x );

	vec3 irrT = mix( irrTF, irrTN, factors.z );
	vec3 irrB = mix( irrBF, irrBN, factors.z );

	vec3 irradiance = mix( irrB, irrT, factors.y );
	vec3 color = texture(u_gb0_texture, uv).xyz * irradiance;
	FragColor = vec4(color, 1.0);
}

// --------------------------------------PROBE_REFLECTION--------------------------------------
\reflection_probe.fs

#version 330 core

in vec3 v_world_position;
in vec3 v_normal;
uniform samplerCube u_texture;
uniform vec3 u_camera_position;

out vec4 FragColor;

void main()
{
	vec3 V = normalize(v_world_position - u_camera_position);
	vec3 N = normalize(v_normal);
	vec3 R = reflect(V, N);
	FragColor = texture( u_texture, R );
}


// --------------------------------------DECAL--------------------------------------
\decal.fs

#version 330 core

uniform mat4 u_inverse_viewprojection;
uniform mat4 u_imodel;
uniform vec2 u_iRes;

uniform sampler2D u_depth_texture;
uniform sampler2D u_texture;

out vec4 FragColor;

void main()
{
	vec2 uv = gl_FragCoord.xy * u_iRes.xy;
	
	float depth = texture(u_depth_texture, uv).x;

	vec4 screen_pos = vec4(uv.x * 2.0 - 1.0, uv.y * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;

	vec3 localpos = (u_imodel * vec4(worldpos,1.0)).xyz;

	//if outside of the volume
	if(localpos.x < -0.5 || localpos.x > 0.5 || localpos.y < -0.5 || localpos.y > 0.5 || localpos.z < -0.5 || localpos.z > 0.5){
		discard;
	}

	vec2 decal_uv = localpos.xz + vec2(0.5);
	vec4 color = texture(u_texture, decal_uv);

	FragColor = color;
}

// --------------------------------------CHRLEN--------------------------------------
\chrlen.fs

#version 330 core

uniform sampler2D u_texture;
uniform vec2 resolution;

vec2 barrelDistortion(vec2 coord, float amt) {
	vec2 cc = coord - 0.5;
	float dist = dot(cc, cc);
	return coord + cc * dist * amt;
}

float sat(float t) {
	return clamp(t, 0.0, 1.0);
}

float linterp(float t) {
	return sat(1.0 - abs(2.0*t - 1.0));
}

float remap(float t, float a, float b) {
	return sat((t - a)/(b - a));
}

vec4 spectrum_offset(float t) {
	vec4 ret;
	float lo = step(t, 0.5);
	float hi = 1.0 - lo;
	float w = linterp(remap(t, 1.0/6.0, 5.0/6.0 ));
	ret = vec4(lo, 1.0, hi, 1.) * vec4(1.0-w, w, 1.0-w, 1.);

	return pow(ret, vec4(1.0/2.2));
}

const float max_distort = 2.2;
const int num_iter = 12;
const float reci_num_iter_f = 1.0 / float(num_iter);

void main() {	
	vec2 uv = (gl_FragCoord.xy/resolution.xy*.5)+.25;

	vec4 sumcol = vec4(0.0);
	vec4 sumw = vec4(0.0);	
	for (int i=0; i < num_iter; i++) {
		float t = float(i) * reci_num_iter_f;
		vec4 w = spectrum_offset(t);
		sumw += w;
		sumcol += w * texture2D(u_texture, barrelDistortion(uv, .6 * max_distort*t));
	}	
	gl_FragColor = sumcol / sumw;
}

// --------------------------------------DEPTHOFFIELD--------------------------------------
\depth_of_field.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;
uniform sampler2D u_outoffocus_texture;
uniform sampler2D u_depth_texture;
uniform mat4 u_inverse_viewprojection;
uniform float minDistance;
uniform float maxDistance;

out vec4 FragColor;

void main() {
    float depth = texture(u_depth_texture, v_uv).x;
    vec4 screen_pos = vec4(v_uv.x * 2.0 - 1.0, v_uv.y * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);
    vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
    vec3 world_position = proj_worldpos.xyz / proj_worldpos.w;

    vec4 focusColor = texture(u_texture, v_uv);
    vec4 outOfFocusColor = texture(u_outoffocus_texture, v_uv);

    float blur = smoothstep(minDistance, maxDistance, abs(world_position.x));

    FragColor = mix(focusColor, outOfFocusColor, blur);
}

// --------------------------------------ANTI-ALIASING--------------------------------------
\antialiasing.fs

#version 330 core

uniform sampler2D u_texture;
uniform vec2 u_viewportSize;
uniform vec2 u_iViewportSize;
#define FXAA_REDUCE_MIN (1.0/128.0)
#define FXAA_REDUCE_MUL (1.0/8.0)
#define FXAA_SPAN_MAX 8.0

out vec4 FragColor;

#include "applyFXAA"

void main() {
	FragColor = applyFXAA(u_texture, gl_FragCoord.xy);
}

// --------------------------------------MOTIONBLUR--------------------------------------
\motionblur.fs

#version 330 core

precision highp float;
varying vec2 v_uv;
uniform sampler2D u_texture;
uniform sampler2D u_depth_texture;
uniform mat4 u_inverse_viewprojection;
uniform mat4 u_viewprojection_old;
uniform sampler2D u_intensity;

void main() {
    vec2 uv = v_uv;
    
    float depth = texture(u_depth_texture, uv).x;
    vec4 screen_pos = vec4(uv.x * 2.0 - 1.0, uv.y * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);
    vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
    vec3 world_position = proj_worldpos.xyz / proj_worldpos.w;

    vec4 oldpos2d = u_viewprojection_old * vec4(world_position, 1.0);
    oldpos2d.xyz /= oldpos2d.w;
    vec2 uv2 = oldpos2d.xy * 0.5 + vec2(0.5);

    vec4 color = vec4(0.0);

    const int SAMPLES = 16;

    for(int i = 0; i < SAMPLES; i++){
        float f = float(i) / float(SAMPLES);
        vec2 interpolated_uv = mix(uv, uv2, f);
        color += texture2D(u_texture, interpolated_uv);
    }

    color /= float(SAMPLES);

    gl_FragColor = color;
}

// --------------------------------------BLURRED--------------------------------------
\blurredof.fs

#version 330 core

in vec2 v_uv;

precision highp float;
uniform sampler2D u_texture;
uniform vec2 u_offset;
uniform float u_intensity;

out vec4 FragColor;

void main() {
   vec4 sum = vec4(0.0);
   
   sum += texture2D(u_texture, v_uv + u_offset * -4.0) * 0.05/0.98;
   sum += texture2D(u_texture, v_uv + u_offset * -3.0) * 0.09/0.98;
   sum += texture2D(u_texture, v_uv + u_offset * -2.0) * 0.12/0.98;
   sum += texture2D(u_texture, v_uv + u_offset * -1.0) * 0.15/0.98;
   sum += texture2D(u_texture, v_uv) * 0.16/0.98;
   sum += texture2D(u_texture, v_uv + u_offset * 4.0) * 0.05/0.98;
   sum += texture2D(u_texture, v_uv + u_offset * 3.0) * 0.09/0.98;
   sum += texture2D(u_texture, v_uv + u_offset * 2.0) * 0.12/0.98;
   sum += texture2D(u_texture, v_uv + u_offset * 1.0) * 0.15/0.98;
   
   FragColor = u_intensity * sum;
}

// --------------------------------------VOLUMETRIC--------------------------------------
\volumetric.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_depth_texture;
uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;
uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;

uniform vec3 u_ambient_light;
uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform float u_light_max_distance;
uniform int u_light_type;
uniform vec3 u_light_direction;

uniform float u_air_density;

const int MAX_LIGHTS = 5;

out vec4 FragColor;

#include "shadowmap"

const int SAMPLES = 64;

void main()
{
	vec2 uv = gl_FragCoord.xy * u_iRes.xy; 
		
	//compute world position from pixel depth
	float depth = texture( u_depth_texture, uv ).x;
	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;

	//compute ray info
	vec3 ray_start = u_camera_pos;
	vec3 ray_dir = ( worldpos - ray_start );
	float ray_length = length(ray_dir);
	ray_dir /= ray_length;
	ray_dir = normalize(ray_dir);
	ray_length = min( 500.0, ray_length ); //max ray

	float step_dist = ray_length / float(SAMPLES);

	vec3 current_pos = ray_start;
	vec3 ray_offset = ray_dir * step_dist;

	//how visible is the point at the end of the ray
	float transparency = 1.0;

	vec3 irradiance = vec3(0.0);

	for(int i = 0; i < SAMPLES; ++i)
	{
		float shadow = testShadowmap(current_pos);
		float att = 1.0; // DIRECTIONAL
		//compute illumination in this point
		vec3 light = u_light_color * shadow;

		//accumulate the amount of light
		irradiance += light * transparency * (u_air_density * step_dist);

		//reduce visibility
		transparency -= u_air_density * step_dist;

		//too dense, nothing can be seen behind
		if( transparency < 0.001 )
			break;

		//advance to next position
		current_pos.xyz += ray_offset;
	}

	FragColor = vec4(irradiance, 1.0 - transparency);
}

// -------------------------------------------------------------------------------
\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}

// -------------------------------------------------------------------------------
\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}